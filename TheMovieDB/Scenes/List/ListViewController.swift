//
//  ListViewController.swift
//  TheMovieDB
//
//  Created by Burak AKIN on 28.08.2020.
//  Copyright (c) 2020 Burak AKIN. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class
{
    func displayUpcomingMovies(viewModel: List.UpcomingMovies.ViewModel)
    func displayNowPlayingMovies(viewModel: List.NowPlayingMovies.ViewModel)
    func displayMovieDetail(viewModel: List.SelectedMovie.ViewModel)
}

class ListViewController: UIViewController, ListDisplayLogic
{
    var interactor: ListBusinessLogic?
    var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?
    
    // MARK: OUTLETS
    @IBOutlet weak var tableView: UITableView!
    
    //MARK: PROPERTY
    var sections = [Section]()
    
    var upComingSections = [Section]()
    var nowPlayingSections = [Section]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        tableView.registerNib(ListMoviesCell.self)
        tableView.registerNib(SliderCell.self)
        fetch()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func fetch()
    {
        interactor?.fetchUpcomingMovies(request: List.UpcomingMovies.Request(model: MoviesUpComingRequest()))
        interactor?.fetchNowPlayingMovies(request: List.NowPlayingMovies.Request(model: MoviesNowPlayingRequest()))
    }
    
    func displayUpcomingMovies(viewModel: List.UpcomingMovies.ViewModel)
    {
        upComingSections = viewModel.sections
        tableView.reloadData()
    }
    func displayNowPlayingMovies(viewModel: List.NowPlayingMovies.ViewModel) {
        nowPlayingSections = viewModel.sections
        tableView.reloadData()
    }
    
    func displayMovieDetail(viewModel: List.SelectedMovie.ViewModel) {
        router?.routeToDetail(segue: nil)
    }
}


extension ListViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        sections = nowPlayingSections +
                   upComingSections
        return sections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return sections[section].items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let item = sections[indexPath.section].items[indexPath.row]
        let cell = tableView.dequeueCell(item, for: indexPath)
        item.configure(cell: cell)
        
        switch cell {
        case let cell as SliderCell:
            cell.delegate = self
        default:
            break
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch sections[indexPath.section].items[0] {
        case is SliderCellConfigurator:
            return 300
        default:
            return UITableView.automaticDimension
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.goToDetail(request: List.SelectedMovie.Request(type: .Upcoming, index: indexPath.row))
    }
    
}

extension ListViewController: CollectionViewDelegate {
    func setIndex(index: Int) {
        interactor?.goToDetail(request: List.SelectedMovie.Request(type: .NowPlaying, index: index))
    }
    
    
}
