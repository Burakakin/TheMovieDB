//
//  ListInteractor.swift
//  TheMovieDB
//
//  Created by Burak AKIN on 28.08.2020.
//  Copyright (c) 2020 Burak AKIN. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBusinessLogic
{
    func fetchUpcomingMovies(request: List.UpcomingMovies.Request)
    func fetchNowPlayingMovies(request: List.NowPlayingMovies.Request)
    func goToDetail(request: List.SelectedMovie.Request)
}

protocol ListDataStore
{
    var moviesUpcoming: [MovieList] { get set }
    var moviesNowPlaying: [MovieList] { get set }
    var selectedMovieId: Int? { get set }
    
}

class ListInteractor: ListBusinessLogic, ListDataStore
{
    var presenter: ListPresentationLogic?
    var worker = ListWorker()
    
    var moviesUpcoming: [MovieList] = []
    var moviesNowPlaying: [MovieList] = []
    var selectedMovieId: Int?
    // MARK: Do something
    
    func fetchUpcomingMovies(request: List.UpcomingMovies.Request)
    {
        
        worker.fetchUpcomingMovies(request: request.model) { result in
            switch result {
            case .success(let response):
                guard let responseData = response.results else { return }
                self.moviesUpcoming = responseData
                let response = List.UpcomingMovies.Response(response: responseData)
                self.presenter?.presentUpcomingMovies(response: response)
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
        
        
    }
    
    func fetchNowPlayingMovies(request: List.NowPlayingMovies.Request) {
        worker.fetchNowPlayingMovies(request: request.model) { result in
            switch result {
            case .success(let response):
                guard let responseData = response.results else { return }
                self.moviesNowPlaying = responseData
                let response = List.NowPlayingMovies.Response(response: responseData)
                self.presenter?.presentNowPlayingMovies(response: response)
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
    }
    
    func goToDetail(request: List.SelectedMovie.Request) {
        switch request.type {
        case .NowPlaying:
            self.selectedMovieId = moviesNowPlaying[request.index].id
            presenter?.presentMovieDetail(response: List.SelectedMovie.Response())
        case .Upcoming:
            self.selectedMovieId = moviesUpcoming[request.index].id
            presenter?.presentMovieDetail(response: List.SelectedMovie.Response())
        }
    }
}
